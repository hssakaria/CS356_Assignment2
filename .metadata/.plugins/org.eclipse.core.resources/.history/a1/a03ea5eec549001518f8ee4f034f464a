import java.awt.*;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

public class AdminTwitter  {

	private JFrame frame;
	private JPanel mainPanel;
	private JPanel rightPanel;
	private JPanel leftPanel;
	private JPanel topPanel;
	private JPanel midPanel;
	private JPanel bottomPanel;

	private JTextField userIDTextField;
	private JTextField groupIDTextField;

	private JLabel messageLabel;
	private JLabel groupIDLabel;
	private Button userAddBtn;
	private Button groupAddBtn;
	private Button userViewBtn;
	private Button totalUserBtn;
	private Button totalGroupBtn;
	private Button totalMsgBtn;
	private Button positiveWordBtn;
	
	private UserComponent currentNode;
	private User user;
	private User currentUserNode;
	private GroupUser group;
	private GroupUser rootGroup;
	private GroupUser currentGroupUserNode;

	private JTree treeView;
	private DefaultMutableTreeNode root;
	private DefaultMutableTreeNode parentNode;
	private DefaultMutableTreeNode node;
	private DefaultTreeModel treeModel;
	private TreePath parentPath;
 
	/***************************
	 * Launch the application.
	 ***************************/
	public void AdminWindow() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					
					AdminTwitter window = new AdminTwitter();
					
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/******************************
	 * Create the application.
	 *****************************/
	public AdminTwitter() {
		initialize();
		
	}

	/**************************************
	 * Initialize the contents of the frame.
	 **************************************/
	private void initialize() {
		
		group = new GroupUser();
		
		
		
		frame = new JFrame("Mini Twitter by Hetal Sakaria");
		frame.setSize(650, 450);
		
		Border border = BorderFactory.createLineBorder(Color.BLACK);
		
		/*****************************************************
		 * mainPanel- contains two sub panels (rightPanel and
		 * 				leftPanel)
		 ****************************************************/
		//mainPanel = new JPanel(new GridLayout(1,2));
		mainPanel = new JPanel(new BorderLayout());
		mainPanel.setBackground(Color.CYAN);
		mainPanel.setBorder(BorderFactory.createLineBorder(Color.gray,10));
		
		

			/*****************************************************
			 * rightPanel- contains treeView and added to mainPanel
			 ****************************************************/ 

			rightPanel = new JPanel(new BorderLayout());
			rightPanel.setBackground(Color.DARK_GRAY);
			rightPanel.setPreferredSize(new Dimension(250,450));
			rightPanel.setOpaque(true);
			
	//			root = new DefaultMutableTreeNode("Root");
				rootGroup = new GroupUser();
				rootGroup.setGroup("CS356 ", null);
				root = new DefaultMutableTreeNode(rootGroup);
					
				treeModel = new DefaultTreeModel( root );
				
					treeView = new JTree(treeModel);
					treeView.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 14));
					treeView.setBackground(Color.DARK_GRAY);
					treeView.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
					treeView.setBackground(Color.darkGray);
					
				
			 /************************************************************************************************
			  * Listen to selected node in the tree
			  ************************************************************************************************/
			 treeView.addTreeSelectionListener(new TreeSelectionListener(){

				@Override
				public void valueChanged(TreeSelectionEvent e) {
//					 DefaultMutableTreeNode node = (DefaultMutableTreeNode) e
//					          .getPath().getLastPathComponent();
//					      System.out.println("You selected " + node);
					
					node = (DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();
					parentPath = treeView.getSelectionPath();
					parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
					
					if (node == null) {
						return;
					}
					
					
					Object selectedNode = node.getUserObject();
					System.out.println("Selected Node " + selectedNode);
					if (selectedNode instanceof User) {
						currentNode = (User) selectedNode;
					} 
					else if (selectedNode instanceof GroupUser) {
						currentNode = (GroupUser) selectedNode;
					}
				}
			 });
			 
			 rightPanel.add(new JScrollPane(treeView ), BorderLayout.WEST);
			 mainPanel.add(rightPanel, BorderLayout.WEST);
				
				
			
			/********p*************************************************************************************
			 * leftPanel- contains three subpanels, top, mid, and
			 * 			bottomPanel.
			 * 			topPanel contains userIdTextArea, userAddBtn,
			 * 			groupIDTextArea, and groudAddBtn
			 * 			midPanel contains userViewBtn
			 * 			bottomPanel contains four buttons which 
			 * 			display the statistics.
			 * 			leftPanel added to mainPanel.***
			 *********************************************************************************************/
			//leftPanel = new JPanel(new GridLayout(3,1));
			 leftPanel = new JPanel(new BorderLayout());
			 	
				leftPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,10));
				leftPanel.setOpaque(true);
				leftPanel.setBackground(Color.darkGray);
				leftPanel.setPreferredSize(new Dimension(400,450));
				
//				messageLabel = new JLabel();
//				messageLabel.setHorizontalAlignment(SwingConstants.CENTER);
//				messageLabel.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 14));
//				messageLabel.setBackground(UIManager.getColor("CheckBox.disabledText"));
//					messageLabel.setForeground(Color.RED);
//				
//				leftPanel.add(messageLabel);
//				
//				topPanel = new JPanel(new GridLayout(2,0));
				topPanel = new JPanel(new FlowLayout());
					//userIDLabel = new JLabel("UserID:");
					//topPanel.add(userIDLabel);
					messageLabel = new JLabel();
					messageLabel.setText("UserID:" );
					
						/*******************************************************************************
						 *userIDTextArea
						 *******************************************************************************/
						userIDTextField = new JTextField(10);
							
							userIDTextField.setBackground(UIManager.getColor("Slider.background"));
							userIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
							userIDTextField.setForeground(UIManager.getColor("TabbedPane.light"));
							userIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
						            BorderFactory.createEmptyBorder(10, 10, 10, 10)));
							userIDTextField.setFocusable(true);
							
							
							/*********************************************************************************
							 * userAddBtn
							 ********************************************************************************/
							userAddBtn = new Button();
							userAddBtn.setLabel("Add User");
							userAddBtn.setPreferredSize(new Dimension(130,50));
								
								/*****************************************************************************
								 * ActionListener
								 *****************************************************************************/
								userAddBtn.addActionListener(new ActionListener(){

									@Override
									public void actionPerformed(ActionEvent e) {
										
									String	id = userIDTextField.getText();
									
										if(!id.equals("")){
											
											addNewUser(id);
											userIDTextField.setText("");
										}
										else{
											
											JOptionPane.showMessageDialog(frame, "Please enter UseID.",	
													"Warning", JOptionPane.WARNING_MESSAGE);
										}
									}
								});
								
						/*********************************************************************************
						 *groupIDTextArea
						 ********************************************************************************/
						groupIDLabel = new JLabel("GroupID:");
//						topPanel.add(groupdIDLable);
						groupIDTextField = new JTextField(10);
							groupIDTextField.setBackground(UIManager.getColor("InternalFrame.background"));
							groupIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
							groupIDTextField.setForeground(UIManager.getColor("InternalFrame.borderHighlight"));
							groupIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
						            BorderFactory.createEmptyBorder(10, 10, 10, 10)));
						
						/*****************************************************
						 * groupAddBtn
						 ****************************************************/		
						groupAddBtn = new Button();
						
							groupAddBtn.setLabel("Add Group");
							
							/******************
							 * ActionListener
							 *****************/
							groupAddBtn.addActionListener(new ActionListener(){

								@Override
								public void actionPerformed(ActionEvent e) {
									
									String	id = groupIDTextField.getText();
								
									if(!id.equals("")){
										
										addNewGroupUser(id);
										groupIDTextField.setText("");

									}
									else{
										JOptionPane.showMessageDialog(frame, "Please enter GroupUseID.",	
												"Warning", JOptionPane.WARNING_MESSAGE);
									}
								}
								
							});
							
					topPanel.add(messageLabel);		
					topPanel.add(userIDTextField);	
					topPanel.add(userAddBtn);
							
				 leftPanel.add(topPanel, BorderLayout.NORTH);
				 
				midPanel =  new JPanel(new BorderLayout());
				
					midPanel.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
					midPanel.setBackground(UIManager.getColor("FormattedTextField.inactiveForeground"));
					/*****************************************************
					 * userViewBtn - Display UserUI
					 ****************************************************/		
					userViewBtn = new Button();
						userViewBtn.setBackground(Color.CYAN);
						userViewBtn.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 15));
						userViewBtn.setForeground(Color.BLACK);
						userViewBtn.setLabel("Open User View");

						userViewBtn.setPreferredSize(new Dimension(300,60));
						/**********************************************************
						 *when UserViewBtn gets trigger, it will instantiate UserUI
						 *and display userTwitterUI using Singleton Pattern
						 **********************************************************/
						userViewBtn.addActionListener(new ActionListener(){
							
							@Override
							public void actionPerformed(ActionEvent e) {
								
								DefaultMutableTreeNode model = (DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();
								String userID = model.getUserObject().toString();
								
								UserTwitterUI.getUserTwitterInstance().UserTwitter(userID); 
								
							}
						});
//						topPanel.add(userIDTextField);
//				    	topPanel.add(userAddBtn);
//				    	topPanel.add(groupIDTextField);
//				    	topPanel.add(groupAddBtn);
//	
					midPanel.add(userViewBtn);
				leftPanel.add(midPanel);
				
				
				
//				bottomPanel = new JPanel(new GridLayout(2,2));
				bottomPanel = new JPanel(new BorderLayout());
					/*****************************************************
					 * totalUserBtn
					 ****************************************************/	
					totalUserBtn = new Button();
						totalUserBtn.setForeground(SystemColor.controlHighlight);
						totalUserBtn.setLabel("Show User Total");
						totalGroupBtn = new Button();
						totalGroupBtn.setForeground(SystemColor.controlHighlight);
						totalGroupBtn.setLabel("Show Group Total");
					totalMsgBtn = new Button();
						totalMsgBtn.setForeground(UIManager.getColor("RadioButton.select"));
						totalMsgBtn.setLabel("Show Total Messages");
					positiveWordBtn = new Button();
						positiveWordBtn.setForeground(UIManager.getColor("RadioButtonMenuItem.selectionBackground"));
						positiveWordBtn.setLabel("Show Positive%");
					
					bottomPanel.add(totalUserBtn);
			    	bottomPanel.add(totalGroupBtn);
			    	bottomPanel.add(totalMsgBtn);
			    	bottomPanel.add(positiveWordBtn);
			    leftPanel.add(bottomPanel);
		    	
		mainPanel.add(leftPanel);
		
		frame.getContentPane().add(mainPanel);
		frame.pack();
		frame.setLocationRelativeTo(null); /* location center */
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	/********************************************************
	 * Add a new GroupUser
	 ********************************************************/
	
	protected void addNewGroupUser(String groupId) {
		
		if(IsNodeExists(groupId)){
			JOptionPane.showMessageDialog (frame, "Group User already exists!", "Message", JOptionPane.INFORMATION_MESSAGE);
		}
		else{
			
			GroupUser pgroupUser = group;
			group=new GroupUser();
		
			if(getParentGroup().equals(null)){
				group.setGroup(groupId, pgroupUser);
			}
			else{
				group.setGroup(groupId, (GroupUser)getParentGroup());
			}
						
			addObject(group.getGroupID(), group);
			
			
			//accept???
			
			
		}
	}
	
	/********************************************************
	 * Add a new User
	 ********************************************************/
	
	public void addNewUser(String userId){
		
		if(IsNodeExists(userId)){
			JOptionPane.showMessageDialog (frame, "User already exists.", "Message", JOptionPane.INFORMATION_MESSAGE);

		}
		else{
			user = new User();
			group = getSelectedGroupUserNode();
			user.addUser(user, userId, group.getGroupID());
			group.addUserToGroup(user);
			addObject(user.getUserID(), user);
			
			//user.accept(AdminVisitor);
					
		
		}
		
	}
	
	
	public DefaultMutableTreeNode addObject(String name, Object child) {
		parentNode = null;
		parentPath = treeView.getSelectionPath();
	
		if (parentPath == null) {
			parentNode = root;
		} else {
			parentNode = 
					(DefaultMutableTreeNode) (parentPath.getLastPathComponent());
		}
	
		return addObject(parentNode, child, name, true);
	}

	
	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, String name) {
		return addObject(parent, child, name, false);
	}

	
	private DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, String name, boolean visible) {
		
		DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);

		if (parent == null) {
			parent = root;
		}

		if (parent.getAllowsChildren()) {
			if (child instanceof User && parent.getAllowsChildren()) {
				childNode.setAllowsChildren(false);
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			} 
			else if (child instanceof GroupUser) {
				childNode.setAllowsChildren(true);
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			}
		}

		if (visible) {
			treeView.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

	// Returns the parent group node
		public Object getParentGroup() {
			return parentNode.getUserObject();
		}
	/********************************************************
	 * Returns the currently selected node in GroupUser object
	 * @return
	 ********************************************************/
	private GroupUser getSelectedGroupUserNode() {

		if ((currentNode != null) && (currentNode instanceof GroupUser)) {
			currentGroupUserNode = (GroupUser) currentNode;
		} else {
			currentGroupUserNode = rootGroup;
		}
		return currentGroupUserNode;
	}
	
	/********************************************************
	 * Returns the currently selected node in User object
	 * @return
	 ********************************************************/
	public User getSelectedUserNode() {
		if (currentNode instanceof User) {
			currentUserNode = (User) currentNode;
		}
		return currentUserNode;
	}
	
	public boolean IsNodeExists(String id){
		
		
		User currentUser;
		GroupUser currentGroupUser;
		String currentID =null;
		
		Enumeration en = root.breadthFirstEnumeration();
		while(en.hasMoreElements()){
			
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) en.nextElement();
			Object currentNode = node.getUserObject();
			
			if(currentNode instanceof User){
				currentUser = (User) currentNode;
				currentID = currentUser.getUserID();
			}
			else if(currentNode instanceof GroupUser){
				currentGroupUser = (GroupUser) currentNode;
				currentID = currentGroupUser.getGroupID();
			}
			
			if(currentID.equals(id)){
				return  true;
			}
			
		}
		
		return false;
	}
	

//
//	@Override
//	public void actionPerformed(ActionEvent e) {
//		
//		String ids;
//		String msg;
//		
//		if(e.getActionCommand().equals("Add User")){
//			
//			ids = userIDTextField.getText();
//			msg = "Please enter UserID!";
//			
//			//addUser(ids, msg);
//			
//			if(!ids.equals("")){
//				messageLabel.setText("");
//			//	newUser = new GroupUser(ids);
//				DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(ids);
//				
//				// check if user already exists.
//				//user.add(user);
//				
//					//	newUser.add(newUser);
//						
//						userIDTextField.setText("");
//						//user.add(root, ids);
//						//System.out.println(newUser);
//						
//						root.add(new DefaultMutableTreeNode(ids));
//						
//						treeModel.reload(root);
//					
//			
//			
//			
//			
//			
//			
//			}
//			userIDTextField.setText("");
//			
//		}
//			
//		
//		if(e.getActionCommand().equals("Add Group")){
//				
//			ids = groupIDTextField.getText();
//			msg = "Please enter GroupUserID!";
//			
//			addUser(ids, msg);
//			
//			groupIDTextField.setText("");
//			
//			
//			//make newly added groupId in the tree selected
//			//int newGroupNo =  treeView.getRowCount();
//			
//			//TreePath userIDfromTree = treeView.getSelectionModel().getSelectionPath();
//			
////			DefaultMutableTreeNode model = (DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();
//			
//			//treeView.setSelectionRow(newGroupNo);
//			
////			TreePath path = treeView.getSelectionPath();
////		    MutableTreeNode node = (MutableTreeNode) path.getLastPathComponent();
////
////			MutableTreeNode newNode = new DefaultMutableTreeNode(ids);
////
////		    model.insertNodeInto(newNode, node, node.getChildCount());
////			
//			
////			System.out.println(model.getUserObject() + "newgroupid   "+newGroupNo);
//			
//			
//			
//			
//		}
//	
////	}
//
//	private void addUser(String ids, String msg) {
//		
//		if(!ids.equals("")){
//			messageLabel.setText("");
//		//	newUser = new GroupUser(ids);
//			DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(ids);
//			
//			// check if user already exists.
//			//user.add(user);
//			
//				//	newUser.add(newUser);
//					
//					userIDTextField.setText("");
//					//user.add(root, ids);
//					//System.out.println(newUser);
//					
//					root.add(new DefaultMutableTreeNode(ids));
//					
//					treeModel.reload(root);
//				
//		}
//		else{
//			messageLabel.setText(msg);
//		}
//	}

//	@Override
//	public void valueChanged(TreeSelectionEvent e) {
////		
////		
//		 DefaultMutableTreeNode parentNode = 
//				 (DefaultMutableTreeNode) e.getPath().getLastPathComponent();
////		
////			DefaultTreeCellRenderer renderer = 
////					(DefaultTreeCellRenderer) treeView.getCellRenderer();
////			 renderer.setTextSelectionColor(Color.white);
////		        renderer.setBackgroundSelectionColor(Color.blue);
////		        renderer.setBorderSelectionColor(Color.black);
//		
//			
//			
//		root = parentNode;
//		
////		System.out.println(e.getPath().getLastPathComponent());
//		
//		
//	}

}

