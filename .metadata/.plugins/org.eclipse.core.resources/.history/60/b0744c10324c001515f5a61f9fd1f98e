import java.awt.*;
/****************************************************
 *AdminTwitter contains a singleton design pattern.
 ****************************************************/


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

public class AdminTwitter  {


	private static AdminTwitter instance = null;

	private AdminController adminContorller;
	private TwitterVisitors twitterVisitors;
	private AdminVisitor adminVisitor;

	private ArrayList<User> listOfUsers = new ArrayList<User>();
	private JFrame frame;
	private JPanel mainPanel;
	private JPanel rightPanel;
	private JPanel leftPanel;
	private JPanel topPanel1;
	private JPanel topPanel2;
	private JPanel midPanel;

	private JPanel bottomPanel1;
	private JPanel bottomPanel2;

	private JTextField userIDTextField;
	private JTextField groupIDTextField;

	private JLabel userIDLabel;
	private JLabel groupIDLabel;
	private Button userAddBtn;
	private Button groupAddBtn;
	private Button userViewBtn;
	private Button totalUserBtn;
	private Button totalGroupBtn;
	private Button totalMsgBtn;
	private Button positiveWordBtn;

	private UserComponent currentNode;
	private User user;
	private User currentUserNode;
	private GroupUser group;
	private GroupUser rootGroup;
	private GroupUser currentGroupUserNode;

	private JTree treeView;
	private DefaultMutableTreeNode root;
	private DefaultMutableTreeNode parentNode;
	private DefaultTreeModel treeModel;
	private TreePath parentPath;
	private UserTwitterUI userTwitterUI;

	private int xBtn = 180;
	private int yBtn = 55;

	/***************************
	 * Launch the application.
	 ***************************/
	public void AdminWindow() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {

					AdminTwitter window = new AdminTwitter();
					window.frame.setVisible(true);

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/****************************************************
	 * Return single Instance of a class "AdminTwitter"
	 * @param userId 
	 ****************************************************/

	public static AdminTwitter getUserTwitterInstance(){
		if(instance == null){
			instance  = new AdminTwitter();
		}
		return instance;
	}
	/******************************
	 * Create the application.
	 *****************************/
	public AdminTwitter() {
		initialize();

	}

	/**************************************
	 * Initialize the contents of the frame.
	 **************************************/
	private void initialize() {

		group = new GroupUser();
		adminVisitor = new AdminVisitor();
		group.accept(adminVisitor);

		frame = new JFrame("Mini Twitter by Hetal Sakaria");
		frame.setSize(450, 450);
		ImageIcon image = new ImageIcon(Toolkit.getDefaultToolkit().getImage("groupIcon.png"));
		Image groupImage = image.getImage();
		frame.setIconImage(groupImage);
		Border border = BorderFactory.createLineBorder(Color.BLACK);

		/*****************************************************
		 * mainPanel- contains two sub panels (rightPanel and
		 * 				leftPanel)
		 ****************************************************/
		mainPanel = new JPanel(new BorderLayout());
		mainPanel.setBackground(Color.CYAN);
		mainPanel.setBorder(BorderFactory.createLineBorder(Color.gray,10));

		/*****************************************************
		 * rightPanel- contains treeView and added to mainPanel
		 ****************************************************/ 

		rightPanel = new JPanel(new BorderLayout());
		rightPanel.setBackground(Color.DARK_GRAY);
		rightPanel.setPreferredSize(new Dimension(200,450));
		rightPanel.setOpaque(true);

		rootGroup = new GroupUser();
		rootGroup.setGroup("CS356", null);
		root = new DefaultMutableTreeNode(rootGroup);

		treeModel = new DefaultTreeModel( root );

		treeView = new JTree(treeModel);
		treeView.setBorder(new LineBorder(Color.CYAN, 3));
		treeView.setForeground(Color.CYAN);
		treeView.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 14));
		treeView.setBackground(Color.DARK_GRAY);
		treeView.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treeView.setBackground(Color.darkGray);

		JScrollPane treeScrollPane = new JScrollPane(treeView);
		treeScrollPane.setPreferredSize(new Dimension(200,450));
		rightPanel.add(treeScrollPane, BorderLayout.WEST);
		mainPanel.add(rightPanel, BorderLayout.WEST);


		/*********************************************************************************************
		 * leftPanel- contains three subpanels, top, mid, and
		 * 			bottomPanel.
		 * 			topPanel contains userIdTextArea, userAddBtn,
		 * 			groupIDTextArea, and groudAddBtn
		 * 			midPanel contains userViewBtn
		 * 			bottomPanel contains four buttons which 
		 * 			display the statistics.
		 * 			leftPanel added to mainPanel.***
		 *********************************************************************************************/

		leftPanel = new JPanel();

		BoxLayout boxLayout= new BoxLayout( leftPanel, BoxLayout.Y_AXIS); 

		leftPanel.setLayout(boxLayout);
		leftPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,10));
		leftPanel.setOpaque(true);
		leftPanel.setBackground(Color.darkGray);
		leftPanel.setPreferredSize(new Dimension(410,450));

		topPanel1 = new JPanel(new FlowLayout());
		topPanel1.setOpaque(true);
		topPanel1.setBackground(Color.darkGray);

		userIDLabel = new JLabel();
		userIDLabel.setText("UserID: " );
		userIDLabel.setForeground(Color.cyan);

		/*******************************************************************************
		 *userIDTextArea
		 *******************************************************************************/
		userIDTextField = new JTextField(15);

		userIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
		userIDTextField.setForeground(Color.darkGray);
		userIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
				BorderFactory.createEmptyBorder(10, 10, 10, 10)));
		userIDTextField.setFocusable(true);


		/*********************************************************************************
		 * userAddBtn
		 ********************************************************************************/
		userAddBtn = new Button();
		userAddBtn.setLabel("Add User");
		userAddBtn.setPreferredSize(new Dimension(120,45));

		/*******************************************************************************
		 * Add User Button ActionListener
		 * If node is not selected or textfield is empty, It throws a warning message.
		 * else a user gets added to chosen parent node.
		 ******************************************************************************/
		userAddBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				String	id = userIDTextField.getText();

				DefaultMutableTreeNode node = 
						(DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();

				if(!id.equals("") && node != null){

					/********************************************************************
					 * The following loop checks if the selected useris a GroupID or a Root. 
					 * If selected node is a instanceof a GroupUse then that GroupID = root
					 * and check if user exist from that node. Not from the root.
					 *******************************************************************/

					returnNodeToAddUser(node);
					addNewUser(id, root);
						
					userIDTextField.setText("");
				}
				else{

					displayWarningMessage("Please enter UseID or Parent node is not selected");

				}
			}
		});

		topPanel1.add(userIDLabel);		
		topPanel1.add(userIDTextField);	
		topPanel1.add(userAddBtn);
		topPanel1.setAlignmentY(Component.TOP_ALIGNMENT);

		leftPanel.add(topPanel1);

		topPanel2 = new JPanel(new FlowLayout());
		topPanel2.setOpaque(true);
		topPanel2.setBackground(Color.darkGray);

		groupIDLabel = new JLabel();
		groupIDLabel.setText("GroupID:");
		groupIDLabel.setForeground(Color.cyan);

		/*************************************************************************
		 *groupIDTextArea
		 *************************************************************************/

		groupIDTextField = new JTextField(15);
		groupIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
		groupIDTextField.setForeground(Color.DARK_GRAY);
		groupIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
				BorderFactory.createEmptyBorder(10, 10, 10, 10)));

		/*************************************************************************
		 * groupAddBtn
		 *************************************************************************/		
		groupAddBtn = new Button();
		groupAddBtn.setLabel("Add Group");
		groupAddBtn.setPreferredSize(new Dimension(120,45));

		/*************************************************************************
		 * ActionListener
		 *************************************************************************/
		groupAddBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				String	id = groupIDTextField.getText();
				DefaultMutableTreeNode node = 
						(DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();

				if(!id.equals("") && node != null){

					addNewGroupUser(id);
					groupIDTextField.setText("");

				}
				else{
					displayWarningMessage("Please enter GroupUseID or Parent node is not selected");
				}
			}
		});


		topPanel2.add(groupIDLabel);		
		topPanel2.add(groupIDTextField);	
		topPanel2.add(groupAddBtn);
		topPanel2.setAlignmentY(Component.TOP_ALIGNMENT);

		leftPanel.add(topPanel2);


		/*************************************************************************
		 * MidPanel that contains User View Buttun
		 *************************************************************************/
		midPanel =  new JPanel();

		midPanel.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		midPanel.setBackground(Color.DARK_GRAY);
		midPanel.setOpaque(true);

		/*************************************************************************
		 *  * userViewBtn - Display UserUI
		 *************************************************************************/
		userViewBtn = new Button();
		userViewBtn.setBackground(Color.BLACK);
		userViewBtn.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 18));
		userViewBtn.setForeground(Color.BLUE);
		userViewBtn.setLabel("Open User View");

		userViewBtn.setPreferredSize(new Dimension(250,60));

		/************************************************************************
		 *when UserViewBtn gets trigger, it will instantiate UserUI
		 *and display userTwitterUI using Singleton Pattern
		 *First make sure the node is a User not a GroupID
		 ***********************************************************************/

		userViewBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				DefaultMutableTreeNode selectedUser = 
						(DefaultMutableTreeNode) treeView.getLastSelectedPathComponent();

				if(selectedUser != null){

					Object currentUser = selectedUser.getUserObject();

					if(currentUser instanceof User){

						currentUserNode = (User) currentUser;

						userTwitterUI  = new UserTwitterUI(currentUserNode, listOfUsers);

						userTwitterUI.UserTwitter();

					}
					else{
						JOptionPane.showMessageDialog (frame, "GroupID cannot be viewed a UserView.",
								"Message", JOptionPane.INFORMATION_MESSAGE);
					}
				}
				else{
					JOptionPane.showMessageDialog (frame, "UserID must be selected", "Message", 
							JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});

		midPanel.add(userViewBtn, BorderLayout.CENTER);
		midPanel.setAlignmentY(Component.TOP_ALIGNMENT);

		leftPanel.add(midPanel);


		bottomPanel1 = new JPanel(new FlowLayout());
		bottomPanel1.setBorder(new LineBorder(Color.CYAN, 2));
		bottomPanel1.setBackground(Color.DARK_GRAY);
		/*****************************************************
		 * totalUserBtn
		 ****************************************************/	
		totalUserBtn = new Button();
		totalUserBtn.setPreferredSize(new Dimension(xBtn, yBtn));
		totalUserBtn.setForeground(SystemColor.controlHighlight);
		totalUserBtn.setLabel("Show User Total");

		/****************************
		 * Tota User Button Action Listener
		 ***************************/
		totalUserBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				JOptionPane.showMessageDialog(frame,
						"Total Users:  "+  adminVisitor.getTotalUsers(),
						"Twitter Users",
						JOptionPane.PLAIN_MESSAGE);
			}

		});

		totalGroupBtn = new Button();
		totalGroupBtn.setPreferredSize(new Dimension(xBtn, yBtn));
		totalGroupBtn.setForeground(SystemColor.controlHighlight);
		totalGroupBtn.setLabel("Show Group Total");

		/****************************
		 * Action Listener
		 ***************************/

		totalGroupBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				JOptionPane.showMessageDialog(frame,
						"Total Groups:  "+ adminVisitor.getTotalGroupUsers(),
						"Twitter Group Users",
						JOptionPane.PLAIN_MESSAGE);
			}

		});

		bottomPanel1.add(totalUserBtn);
		bottomPanel1.add(totalGroupBtn);
		bottomPanel1.setAlignmentY(Component.TOP_ALIGNMENT);

		leftPanel.add(bottomPanel1);

		bottomPanel2 = new JPanel(new FlowLayout());
		bottomPanel2.setBorder(new LineBorder(Color.CYAN, 2));
		bottomPanel2.setBackground(Color.DARK_GRAY);

		totalMsgBtn = new Button();
		totalMsgBtn.setPreferredSize(new Dimension(xBtn, yBtn));
		totalMsgBtn.setForeground(UIManager.getColor("RadioButton.select"));
		totalMsgBtn.setLabel("Show Total Messages");

		/****************************************************************
		 * Action Listener
		 * Total Messages are displayed using Visitor Pattern
		 ***************************************************************/

		totalMsgBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				JOptionPane.showMessageDialog(frame,
						"Total Messages:  "+ user.getTotalMessages(),
						"Twitter Messages",
						JOptionPane.PLAIN_MESSAGE);
			}

		});


		positiveWordBtn = new Button();
		positiveWordBtn.setPreferredSize(new Dimension(xBtn, yBtn));
		positiveWordBtn.setForeground(Color.GREEN);
		positiveWordBtn.setLabel("Show Positive%");

		/****************************
		 * Action Listener
		 ***************************/
		positiveWordBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {

				JOptionPane.showMessageDialog(frame,
						"Total Messages:  "+ user.getTotalPositivePercent()+"%",
						"Twitter Messages", JOptionPane.PLAIN_MESSAGE);
			}

		});

		bottomPanel2.add(totalMsgBtn);
		bottomPanel2.add(positiveWordBtn);
		bottomPanel2.setAlignmentY(Component.TOP_ALIGNMENT);

		leftPanel.add(bottomPanel2);

		leftPanel.add(bottomPanel2);

		mainPanel.add(leftPanel);

		frame.getContentPane().add(mainPanel);
		frame.pack();
		frame.setLocationRelativeTo(null); /* location center */
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	/***************************************************
	 * Return root. If selected node is a Group_User
	 * the new root to add a user will the that Group_User
	 * @param node
	 * @return
	 ***************************************************/

	protected DefaultMutableTreeNode returnNodeToAddUser(DefaultMutableTreeNode node) {

		Object thisUser = node.getUserObject();

		if( thisUser instanceof GroupUser){

			root = node;
		}

		return root;
	}

	protected void displayWarningMessage(String warningMsg) {

		JOptionPane.showMessageDialog(frame, warningMsg,	
				"Warning", JOptionPane.WARNING_MESSAGE);

	}

	/********************************************************
	 * Add a new GroupUser
	 ********************************************************/

	protected void addNewGroupUser(String groupId) {

		if(IsUserExists(groupId, root)){

			displayMsgIDExists("Group User already exists!");
		}
		else{

			GroupUser pgroupUser = group;
			group=new GroupUser();

			if(getParentGroup().equals(null)){

				group.setGroup(groupId, pgroupUser);
			}
			else{
				group.setGroup(groupId, (GroupUser)getParentGroup());
			}

			addObject(group.getGroupID(), group);

			// Using Visitor pattern
			group.accept(adminVisitor);

		}
	}

	/********************************************************
	 * Add a new User
	 ********************************************************/

	public void addNewUser(String userId, DefaultMutableTreeNode root){

		if(IsUserExists(userId, root)){

			displayMsgIDExists("User already exists.");
		}
		else{
			user = new User();
			group = getSelectedGroupUserNode();
			user.addUser(user, userId, group.getGroupID());
			group.addUserToGroup(user);
			addObject(user.getUserID(), user);

			listOfUsers.add(user.getUser());


			// Using Visitor pattern
			user.accept(adminVisitor);

		}

	}


	/********************************************************
	 * Display message if userId or GroupId already in the
	 * treeView.
	 ********************************************************/

	private void displayMsgIDExists(String msg) {

		JOptionPane.showMessageDialog (frame, msg, "Message", 
				JOptionPane.INFORMATION_MESSAGE);
	}

	public DefaultMutableTreeNode addObject(String name, Object child) {
		parentNode = null;
		parentPath = treeView.getSelectionPath();

		if (parentPath == null) {
			parentNode = root;
		} else {
			parentNode = 
					(DefaultMutableTreeNode) (parentPath.getLastPathComponent());
		}

		return addObject(parentNode, child, name, true);
	}


	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, String name) {
		return addObject(parent, child, name, false);
	}


	private DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, String name, boolean visible) {

		DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);

		if (parent == null) {
			parent = root;
		}

		if (parent.getAllowsChildren()) {
			if (child instanceof User && parent.getAllowsChildren()) {
				childNode.setAllowsChildren(false);
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			} 
			else if (child instanceof GroupUser) {
				childNode.setAllowsChildren(true);
				treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
			}
		}

		if (visible) {
			treeView.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

	// Returns the parent group node
	public Object getParentGroup() {
		return parentNode.getUserObject();
	}
	/********************************************************
	 * Returns the currently selected node in GroupUser object
	 * @return
	 ********************************************************/
	private GroupUser getSelectedGroupUserNode() {

		if ((currentNode != null) && (currentNode instanceof GroupUser)) {
			currentGroupUserNode = (GroupUser) currentNode;
		}
		else {
			currentGroupUserNode = rootGroup;
		}
		return currentGroupUserNode;
	}

	/********************************************************
	 * Returns the currently selected node in User object
	 * @return
	 ********************************************************/
	public User getSelectedUserNode() {

		if (currentNode instanceof User) {
			currentUserNode = (User) currentNode;
		}
		return currentUserNode;
	}

	public boolean IsUserExists(String id, DefaultMutableTreeNode root){


		User currentUser;
		GroupUser currentGroupUser;
		String currentID =null;

		Enumeration en = root.breadthFirstEnumeration();
		while(en.hasMoreElements()){

			DefaultMutableTreeNode node = (DefaultMutableTreeNode) en.nextElement();
			Object currentNode = node.getUserObject();

			if(currentNode instanceof User){
				currentUser = (User) currentNode;
				currentID = currentUser.getUserID();
			}
			else if(currentNode instanceof GroupUser){
				currentGroupUser = (GroupUser) currentNode;
				currentID = currentGroupUser.getGroupID();
			}

			if(currentID.equals(id)){
				return  true;
			}

		}

		return false;
	}


}

