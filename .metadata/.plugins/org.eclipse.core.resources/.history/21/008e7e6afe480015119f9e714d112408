import java.awt.*;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.border.LineBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

public class AdminTwitter implements ActionListener ,TreeSelectionListener {

	private JFrame frame;
	private JPanel mainPanel;
	private JPanel leftPanel;
	private JPanel rightPanel;
	private JPanel topPanel;
	private JPanel midPanel;
	private JPanel bottomPanel;

	private JTree treeView;
	private JTextField userIDTextField;
	private JTextField groupIDTextField;
	private JLabel groupdIDLable;
	private JLabel userIDLabel;
	private JLabel messageLabel;
	private Button userAddBtn;
	private Button groupAddBtn;
	private Button userViewBtn;
	private Button totalUserBtn;
	private Button totalGroupBtn;
	private Button totalMsgBtn;
	private Button positiveWordBtn;
	private JDialog msgDL;
	DefaultMutableTreeNode root = new DefaultMutableTreeNode("CS356");
	 DefaultTreeModel treeModel;
	GroupUser newUser;
	java.util.List<String> idsList;
	private int count =0;
	
	
	//ArrayList<String> idsList; 
	/***************************
	 * Launch the application.
	 ***************************/
	public void AdminWindow() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					
					AdminTwitter window = new AdminTwitter();
					
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/******************************
	 * Create the application.
	 *****************************/
	public AdminTwitter() {
		initialize();
		
	}

	/**************************************
	 * Initialize the contents of the frame.
	 **************************************/
	private void initialize() {
				
		frame = new JFrame("Mini Twitter by Hetal Sakaria");
		frame.setSize(650, 450);
		
	
		Border border = BorderFactory.createLineBorder(Color.BLACK);
		
		/*****************************************************
		 * mainPanel- contains two sub panels (rightPanel and
		 * 				leftPanel)
		 ****************************************************/
		mainPanel = new JPanel(new GridLayout(1,2));
		
			/*****************************************************
			 * rightPanel- contains treeView and added to mainPanel
			 ****************************************************/ 
	
			 treeModel = new DefaultTreeModel( root );	
			 treeView = new JTree(new DefaultTreeModel(
			 	new DefaultMutableTreeNode("Root") {
			 		{
			 		}
			 	}
			 ));
			 treeView.setForeground(UIManager.getColor("Button.light"));
			 
			 treeView.setBorder(new LineBorder(new Color(0, 0, 0), 2));
			// treeView.setBackground(UIManager.getColor("Button.background"));
			 treeView.setFocusable(true);

			 treeView.addTreeSelectionListener(this);
//			 treeView.addTreeSelectionListener(new TreeSelectionListener(){
//
//				@Override
//				public void valueChanged(TreeSelectionEvent e) {
//					 DefaultMutableTreeNode node = (DefaultMutableTreeNode) e
//					          .getPath().getLastPathComponent();
//					      System.out.println("You selected " + node);					
//				}
//				 
//			 });
				

			 mainPanel.setBorder(BorderFactory.createLineBorder(Color.gray,10));
				
				mainPanel.add(new JScrollPane(treeView ));
			
			
			/*****************************************************
			 * leftPanel- contains three subpanels, top, mid, and
			 * 			bottomPanel.
			 * 			topPanel contains userIdTextArea, userAddBtn,
			 * 			groupIDTextArea, and groudAddBtn
			 * 			midPanel contains userViewBtn
			 * 			bottomPanel contains four buttons which 
			 * 			display the statistics.
			 * 			leftPanel added to mainPanel.
			 ****************************************************/
			leftPanel = new JPanel(new GridLayout(4,1));
			
				leftPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,10));
			
				messageLabel = new JLabel("");
				messageLabel.setBackground(UIManager.getColor("CheckBox.disabledText"));
				messageLabel.setForeground(UIManager.getColor("Button.light"));
				messageLabel.setSize(new Dimension(140, 130));
				
				leftPanel.add(messageLabel, BorderLayout.CENTER);
				
				topPanel = new JPanel(new GridLayout(2,2));
					//userIDLabel = new JLabel("UserID:");
					//topPanel.add(userIDLabel);
						/*****************************************************
						 *userIDTextArea
						 ****************************************************/
						userIDTextField = new JTextField(10);
							
							userIDTextField.setBackground(UIManager.getColor("Slider.background"));
							userIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
							userIDTextField.setForeground(UIManager.getColor("TabbedPane.light"));
							userIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
						            BorderFactory.createEmptyBorder(10, 10, 10, 10)));
						/*****************************************************
						 *groupIDTextArea
						 ****************************************************/
//						groupdIDLable = new JLabel("GroupID:");
//						topPanel.add(groupdIDLable);
						groupIDTextField = new JTextField(10);
							groupIDTextField.setBackground(UIManager.getColor("InternalFrame.background"));
							groupIDTextField.setFont(new Font("Microsoft Sans Serif", Font.PLAIN, 13));
							groupIDTextField.setForeground(UIManager.getColor("InternalFrame.borderHighlight"));
							groupIDTextField.setBorder(BorderFactory.createCompoundBorder(border, 
						            BorderFactory.createEmptyBorder(10, 10, 10, 10)));
							
						/*****************************************************
						 * userAddBtn
						 ****************************************************/
						userAddBtn = new Button();
							userAddBtn.setLabel("Add User");
							
							/*********************
							 * ActionListener
							 *********************/
							userAddBtn.addActionListener(this);
							
						/*****************************************************
						 * groupAddBtn
						 ****************************************************/		
						groupAddBtn = new Button();
						
							groupAddBtn.setLabel("Add Group");
							
							/******************
							 * ActionListener
							 *****************/
							groupAddBtn.addActionListener(this);
							
//							
				 leftPanel.add(topPanel);
				 
				midPanel = new JPanel();
				
					midPanel.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
					midPanel.setBackground(UIManager.getColor("FormattedTextField.inactiveForeground"));
					/*****************************************************
					 * userViewBtn - Display UserUI
					 ****************************************************/		
					userViewBtn = new Button();
						userViewBtn.setBackground(Color.CYAN);
						userViewBtn.setFont(new Font("Microsoft Sans Serif", Font.BOLD, 15));
						userViewBtn.setForeground(Color.BLACK);
						userViewBtn.setLabel("Open User View");

						userViewBtn.setPreferredSize(new Dimension(300,60));
						/**********************************************************
						 *when UserViewBtn gets trigger, it will instantiate UserUI
						 *and display userTwitterUI using Singleton Pattern
						 **********************************************************/
						userViewBtn.addActionListener(new ActionListener(){
							
							@Override
							public void actionPerformed(ActionEvent e) {
								UserTwitterUI.getUserTwitterInstance().UserTwitter(); 
							}
						});
						topPanel.add(userIDTextField);
				    	topPanel.add(userAddBtn);
				    	topPanel.add(groupIDTextField);
				    	topPanel.add(groupAddBtn);
	
					midPanel.add(userViewBtn);
				leftPanel.add(midPanel);
				
				
				
				bottomPanel = new JPanel(new GridLayout(2,2));

					/*****************************************************
					 * totalUserBtn
					 ****************************************************/	
					totalUserBtn = new Button();
						totalUserBtn.setForeground(SystemColor.controlHighlight);
						totalUserBtn.setLabel("Show User Total");
						totalGroupBtn = new Button();
						totalGroupBtn.setForeground(SystemColor.controlHighlight);
						totalGroupBtn.setLabel("Show Group Total");
					totalMsgBtn = new Button();
						totalMsgBtn.setForeground(UIManager.getColor("RadioButton.select"));
						totalMsgBtn.setLabel("Show Total Messages");
					positiveWordBtn = new Button();
						positiveWordBtn.setForeground(UIManager.getColor("RadioButtonMenuItem.selectionBackground"));
						positiveWordBtn.setLabel("Show Positive%");
					
					bottomPanel.add(totalUserBtn);
			    	bottomPanel.add(totalGroupBtn);
			    	bottomPanel.add(totalMsgBtn);
			    	bottomPanel.add(positiveWordBtn);
			    leftPanel.add(bottomPanel);
		    	
		mainPanel.add(leftPanel);
		
		frame.getContentPane().add(mainPanel);
		frame.pack();
		frame.setLocationRelativeTo(null); /* location center */
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	


	@Override
	public void actionPerformed(ActionEvent e) {
		
		String ids;
		DefaultTreeModel model = (DefaultTreeModel) treeView.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
		
		
		
		if(e.getActionCommand().equals("Add User")){
			
			ids = userIDTextField.getText();
			
			if(!ids.equals("")){
			
				//checkIFidExist(ids);
			
				
				
				newUser = new GroupUser(ids);
				
				
				
				
					newUser.add(newUser);
					
					userIDTextField.setText("");
					
					System.out.println(newUser);
					
					root.add(new DefaultMutableTreeNode(ids));
					
					model.reload();		
					
				
				
			}
			else{
				messageLabel.setText("Please Enter your UserID");
			}
		}
			
	
	
		
		if(e.getActionCommand().equals("Add Group")){
			
			
			Icon image = new ImageIcon("groupIcon.png");
			DefaultTreeCellRenderer renderer = 
					(DefaultTreeCellRenderer) treeView.getCellRenderer();
			renderer.setIcon(image);
		
			
			ids = groupIDTextField.getText();
			
			if(!ids.equals("")){
			//DefaultMutableTreeNode newNode =new DefaultMutableTreeNode(ids);
				
				root.add(new DefaultMutableTreeNode(ids));
				//root.add(newNode);
			
				newUser = new GroupUser(ids);
			
				//newUser = new CreateUser(ids);
	
				for(GroupUser g : newUser.getUser()){
					System.out.println(newUser.getUser().toString());
				}
			
				newUser.add(newUser);
				
				System.out.println(newUser);
				groupIDTextField.setText("");
				treeModel.reload(root);	
			}
		}
		
		//System.out.println(idsList);
//	


	
	}

	@Override
	public void valueChanged(TreeSelectionEvent e) {
//		
//		
		 DefaultMutableTreeNode parentNode = 
				 (DefaultMutableTreeNode) e.getPath().getLastPathComponent();
//		
//			DefaultTreeCellRenderer renderer = 
//					(DefaultTreeCellRenderer) treeView.getCellRenderer();
//			 renderer.setTextSelectionColor(Color.white);
//		        renderer.setBackgroundSelectionColor(Color.blue);
//		        renderer.setBorderSelectionColor(Color.black);
		
			
			
		root = parentNode;
		
//		System.out.println(e.getPath().getLastPathComponent());
		
		
	}

}


//treeView.addTreeSelectionListener(new TreeSelectionListener() {
//    public void valueChanged(TreeSelectionEvent e) {
//      DefaultMutableTreeNode node = (DefaultMutableTreeNode) e
//          .getPath().getLastPathComponent();
//      System.out.println("You selected " + node);
//    }
//  });



//
//private JTree getTree()
//{
//    String[] birds = {
//        // branches  |<-- child leaf nodes -->|
//        "hawks",   "gray",    "red-tailed", "rough-legged",
//        "falcons", "harrier", "kestrel",    "kite", 
//        "owls",    "barred",  "saw-whet",   "snowy"
//    };
//    DefaultMutableTreeNode root = new DefaultMutableTreeNode("birds");
//    DefaultMutableTreeNode[] nodes = new DefaultMutableTreeNode[birds.length];
//    for(int j = 0; j < nodes.length; j++)
//        nodes[j] = new DefaultMutableTreeNode(birds[j]);
//    for(int j = 0; j < 9; j += 4)
//    {
//        root.insert(nodes[j], j % 3);
//        for(int k = j + 1; k < j + 4; k++)
//            nodes[j].insert(nodes[k], k - j - 1);
//    }
//    DefaultTreeModel model = new DefaultTreeModel(root);
//    tree = new JTree(model);
//    tree.addTreeSelectionListener(this);
//    return tree;
//}

