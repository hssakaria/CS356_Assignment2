package Controller;
/****************************************************************
 * Using Composite Design Patter. 
 * GroupUser is a composite of multiple Users
 * GroupUser act as a Parent Node. and Users are the Children
 ****************************************************************/
import java.util.ArrayList;
import java.util.List;

public class GroupUser implements Visitable,UserComponent {

	private String groupID;


	private GroupUser groupUser;

	private List<User> userList;

	public String getGroupID() {
		return groupID;
	}

	public void setGroupID(String groupID) {
		this.groupID = groupID;
	}

	public GroupUser getGroupUser() {
		return groupUser;
	}

	public void setGroupUser(GroupUser groupUser) {
		this.groupUser = groupUser;
	}

	public void setParentGroup(GroupUser groupUser){
		this.groupUser = groupUser;
	}

	/*********************************************************
	 * Create a new Group
	 *********************************************************/
	public void setGroup(String userId, GroupUser groupUser){

		userList = new ArrayList<User>();
		setGroupID(userId);
		setParentGroup(groupUser);	

	}

	public String toString(){
		return  "Group_"+ groupID;
	}

	public void addUserToGroup(User user){
		userList.add(user);
	}

	public List<User> getUserList() {
		return userList;
	}

	public void setUserList(List<User> userList) {
		this.userList = userList;
	}

	public boolean IsUserExists(User user){
		for(User us : userList){
			if(us.equals(user)){
				return true;
			}
		}
		return false;
	}

	@Override
	public void accept(TwitterVisitors twitterVisitors) {
		twitterVisitors.groupVisitor(this);
	}


}
